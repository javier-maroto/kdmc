function [symb2sig, sig2symb, M, errorRate] = getModulator(modulation, config_params)
%GETMODULATOR returns modulators and demodulators
%   TODO: OOK, AM-SSB-SC, AM-SSB-WC, AM-DSB-SC, AM-DSB-WC, correct 4ASK,
%   8ASK, use audio signal for FM
sps = config_params(1);
n_span_sym = config_params(2);
rolloff = config_params(3);
fs = config_params(4);

tx_filt = comm.RaisedCosineTransmitFilter( ...
    'Shape','Normal', ...
    'RolloffFactor', rolloff, ...
    'FilterSpanInSymbols', n_span_sym, ...
    'OutputSamplesPerSymbol', sps, ...
    'Gain', sqrt(sps));
rx_filt = comm.RaisedCosineReceiveFilter( ...
    'Shape','Normal', ...
    'RolloffFactor', rolloff, ...
    'FilterSpanInSymbols', n_span_sym, ...
    'InputSamplesPerSymbol', sps, ...
    'DecimationFactor', sps);

switch modulation
    case {'BPSK','FM','GMSK'}
        M = 2;
    case {'QPSK','OQPSK','4ASK'}
        M = 4;
    case {'8PSK','8ASK'}
        M = 8;
    case {'16PSK','16APSK','16QAM'}
        M = 16;
    case {'32PSK','32APSK','32QAM'}
        M = 32;
    case {'64APSK','64QAM'}
        M = 64;
    case {'128APSK','128QAM'}
        M = 128;
    case {'256QAM'}
        M = 256;
end
switch modulation
    case {'BPSK','8PSK','16PSK','32PSK'}
        mod = comm.PSKModulator(...
            'ModulationOrder', M, 'PhaseOffset', 0, 'BitInput', true);
        demod = comm.PSKDemodulator(...
            'ModulationOrder', M, 'PhaseOffset', 0, 'BitOutput', true);
    case {'QPSK'}
        mod = comm.PSKModulator(...
            'ModulationOrder', M, 'PhaseOffset', pi/M, 'BitInput', true);
        demod = comm.PSKDemodulator(...
            'ModulationOrder', M, 'PhaseOffset', pi/M, 'BitOutput', true);
    case {'16APSK','32APSK'}
        mod = @(x) dvbsapskmod(...
            x, M, 's2', 'UnitAveragePower', true, 'InputType', 'bit');
        demod = @(x) dvbsapskdemod(...
            x, M, 's2', 'UnitAveragePower', true, 'OutputType', 'bit');
    case {'64APSK','128APSK'}
        mod = @(x) dvbsapskmod(...
            x, M, 's2x', 'UnitAveragePower', true, 'InputType', 'bit');
        demod = @(x) dvbsapskdemod(...
            x, M, 's2x', 'UnitAveragePower', true, 'OutputType', 'bit');
    case {'16QAM','32QAM','64QAM','128QAM','256QAM'}
        mod = @(x) qammod(...
            x, M, 'gray', 'UnitAveragePower', true, 'InputType', 'bit');
        demod = @(x) qamdemod(...
            x, M, 'gray', 'UnitAveragePower', true, 'OutputType', 'bit');
    case {'OQPSK'}
        mod = comm.OQPSKModulator(...
            'PulseShape', 'Normal raised cosine', ...
            'RolloffFactor', rolloff, ...
            'SamplesPerSymbol', sps, 'SymbolMapping', 'Gray', ...
            'FilterSpanInSymbols', n_span_sym, 'BitInput', true);
        demod = comm.OQPSKDemodulator(...
            'PulseShape', 'Normal raised cosine', ...
            'RolloffFactor', rolloff, ...
            'SamplesPerSymbol', sps, 'SymbolMapping', 'Gray', ...
            'FilterSpanInSymbols', n_span_sym, 'BitOutput', true);
    case {'FM'}
        mod = comm.FMBroadcastModulator(...
            'AudioSampleRate', fs, ...
            'SampleRate', fs);
        demod = comm.FMBroadcastDemodulator(...
            'AudioSampleRate', fs, ...
            'SampleRate', fs);
    case {'GMSK'}
        mod = comm.GMSKModulator(...
            'BitInput', true, 'SamplesPerSymbol', sps);
        demod = comm.GMSKDemodulator(...
            'BitOutput', true, 'SamplesPerSymbol', sps);
    case {'4ASK','8ASK'}
        m = 2 * ones(1, M/2);
        radii = (-M+1:2:M-1)*sqrt(3/(M^2-1));
        mod = @(x) apskmod(...
            x, m, radii, 'SymbolMapping', 'Gray', 'InputType', 'bit');
        demod = @(x) apskmod(...
            x, m, radii, 'SymbolMapping', 'Gray', 'InputType', 'bit');
end

switch modulation
    case {'BPSK','QPSK','8PSK','16PSK','32PSK','16APSK','32APSK',...
            '64APSK','128APSK','16QAM','32QAM','64QAM','128QAM',...
            '256QAM'}
        symb2sig = @(x) tx_filt(mod(x));
        sig2symb = @(x) demod(rx_filt(x));
    case {'OQPSK','FM','GMSK','4ASK','8ASK'}
        symb2sig = @(x) mod(x);
        sig2symb = @(x) demod(x);
end

k = log2(M);
filtDelay = k * n_span_sym;

switch modulation
    case {'FM'}
        errorRate = -1;
    case {'GMSK'}
        errorRate = comm.ErrorRate('ReceiveDelay', demod.TracebackDepth);
    otherwise
        errorRate = comm.ErrorRate('ReceiveDelay', filtDelay);
end


function mod = getDemodulator(modulation, sps, n_span_sym, rolloff, fs, fc)

M = getM(modulation);

switch modulation
    case {'BPSK','8-PSK','16-PSK','32-PSK'}
        mod = @(x) pskdemod(x,M,0,'gray');
    case {'QPSK'}
        mod = @(x) pskdemod(x,M,pi/4,'gray');
    case {'16-APSK','32-APSK'}
        mod = @(x) dvbsapskdemod(x,M,'s2','UnitAveragePower',true);
    case {'64-APSK','128-APSK',"256-APSK"}
        mod = @(x) dvbsapskdemod(x,M,'s2x','UnitAveragePower',true);
    case {'16-QAM','32-QAM','64-QAM','128-QAM','256-QAM'}
        mod = @(x) qamdemod(...
            x, M, 'gray', 'UnitAveragePower', true, 'OutputType', 'integer');
    case {'PAM4'}
        %amp = 1/sqrt(mean(abs(pammod(0:M-1,M)).^2));
        mod = @(x) pamdemod(x,M,0,'gray');
    case {'OQPSK'}
        mod = comm.OQPSKDemodulator(...
            'PulseShape', 'Normal raised cosine', ...
            'RolloffFactor', rolloff, ...
            'SamplesPerSymbol', sps, 'SymbolMapping', 'Gray', ...
            'FilterSpanInSymbols', n_span_sym);
    case {'GFSK'}
        cpmm_mod = comm.CPMDemodulator(...
            'ModulationOrder',M,...
            'FrequencyPulse','Gaussian',...
            'BandwidthTimeProduct',0.35,...
            'ModulationIndex',1,...
            'SamplesPerSymbol',sps,...
            'SymbolMapping','Gray');
        meanM = mean(0:M-1);
        mod = @(x) cpmm_mod(2*(x-meanM));
    case {'CPFSK'}
        cpmm_mod = comm.CPFSKDemodulator(...
            'ModulationOrder',M,...
            'ModulationIndex',0.5,...
            'SamplesPerSymbol',sps,...
            'SymbolMapping','Gray');
        meanM = mean(0:M-1);
        mod = @(x) cpmm_mod(2*(x-meanM));
    case {'B-FM'}
        mod = comm.FMBroadcastDemodulator(...
            'AudioSampleRate',fs,...
            'SampleRate',fs);
    case {'DSB-AM'}
        mod = @(x) amdemod(x,fc,fs);
    case {'SSB-AM'}
        mod = @(x) ssbdemod(x,fc,fs);
    otherwise
        error(modulation)
end


